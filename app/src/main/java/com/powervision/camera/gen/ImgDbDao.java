package com.powervision.camera.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.powervision.gcs.camera.model.ImgDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMG_DB".
*/
public class ImgDbDao extends AbstractDao<ImgDb, Long> {

    public static final String TABLENAME = "IMG_DB";

    /**
     * Properties of entity ImgDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Path = new Property(1, String.class, "path", false, "PATH");
        public final static Property CreatTime = new Property(2, long.class, "creatTime", false, "CREAT_TIME");
    }


    public ImgDbDao(DaoConfig config) {
        super(config);
    }
    
    public ImgDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMG_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"PATH\" TEXT," + // 1: path
                "\"CREAT_TIME\" INTEGER NOT NULL );"); // 2: creatTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMG_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImgDb entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
        stmt.bindLong(3, entity.getCreatTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImgDb entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
        stmt.bindLong(3, entity.getCreatTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ImgDb readEntity(Cursor cursor, int offset) {
        ImgDb entity = new ImgDb( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // path
            cursor.getLong(offset + 2) // creatTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImgDb entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreatTime(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ImgDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ImgDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImgDb entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
